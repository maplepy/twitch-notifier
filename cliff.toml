# cliff.toml
# Configuration for git-cliff

[changelog]
# Path to the conventional commits specification section in the footer
commit_parsers = [
    { regex = "^(?P<type>feat|fix|refactor|perf|test|build|ci|docs|style|revert)(?:\\((?P<scope>.*)\\))?!?:", group_sort = [
        "feat",
        "fix",
    ] },
    { regex = "^(?P<type>chore)(?:\\((?P<scope>.*)\\))?!?:", skip = true },
]
# Protect breaking changes from being skipped
protect_breaking_commits = false
# Filter out commits that are not matched by commit parsers
filter_unconventional = true
# Sort commits inside sections by oldest/newest
sort_commits = "newest"
# Sections of the changelog, grouped by commit type
body = """
{% if version %}
    ## [{{ version | trim_start_matches(pat=\"v\") }}] - {{ timestamp | date(format=\"%Y-%m-%d\") }}
{% else %}
    ## [unreleased]
{% endif %}
{% for group, commits in commits | group_by(attribute=\"group\") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}{{ commit.message | upper_first }} ([{{ commit.id | truncate(length=7, end=\"\") }}]({{ commit.github.url }}))
    {% endfor %}
{% endfor %}
"""

[git]
# Parse the commits based on the Conventional Commits specification
conventional_commits = true
# Filter out commits that are not part of the changelog
filter_commits = true
# Glob pattern for matching git tags
tag_pattern = "v[0-9].*"
# Skip tags that are not annotated
skip_untracked = true
# Sort the tags topologically
sort_tags = true
